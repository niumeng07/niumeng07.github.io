<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[LeetCode]]></title>
      <url>https://niumeng07.github.io/posts/6096f3d5/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/niumeng07/code-dev" target="_blank" rel="external">https://github.com/niumeng07/code-dev</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Work-Is-Work]]></title>
      <url>https://niumeng07.github.io/posts/9af969b/</url>
      <content type="html"><![CDATA[<p>今天在完全不知道为什么的情况下被狗咬了，而且还是当着老大的面的被咬了。<br><a id="more"></a><br>工作中不同的人看这样的问题也会是不同的方面。我理解所有人，包括咬我的人，包括把它当枪使的人，包括老大。<br>其实，一个团队能走到多大，看的是格局。</p>
<p>纪念。希望有一天我能把这当故事讲给你听。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作感触 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于 Tensorflow 的 Google Wide & Deep Learning Model]]></title>
      <url>https://niumeng07.github.io/posts/515729c0/</url>
      <content type="html"><![CDATA[<p>Google 的 <a href="https://www.tensorflow.org/" target="_blank" rel="external">Tensorflow</a> 已经出来很长时间，这的确是一个非常实用的框架。前不久，Google 又发布了一个机器学习模型 <a href="https://www.tensorflow.org/tutorials/wide_and_deep" target="_blank" rel="external">Wide &amp; Deep Model</a>，这一模型把传统的线性模型( LR )和深度学习模型( CNN、DNN )等结合在一起，目的是把线性模型的记忆能力和深度学习模型的分析能力结合在一起。近期在实践该模型，遇到很多坑，在 Google 上搜索时发现，大部分 Blog 等只是解析了该模型怎么用，或者说是把 Google 的一些 Tutorial 翻译了一遍，但是并没有对使用过程中可能存在的问题做出深入分析，或者说并没有把可能遇到问题的地方展现出来。因此我希望在这一方面写一写自己的经历，供大家参考。</p>
<p>本文采用实验记录的方式展开，可能也会存在许多问题，但这些问题可能大家也会遇到或者遇到过，希望能共同讨论。</p>
<a id="more"></a>
<h2 id="Tensorflow-的安装"><a href="#Tensorflow-的安装" class="headerlink" title="Tensorflow 的安装"></a>Tensorflow 的安装</h2><p>我在 CentOS6.5 和 macOS Sirrra 上分别安装过 Tensorflow。两次安装均是参考 Tensorflow <a href="https://www.tensorflow.org/install/" target="_blank" rel="external">官方 Intall 文档</a>。</p>
<h3 id="在-CentOS6-5-系统中安装"><a href="#在-CentOS6-5-系统中安装" class="headerlink" title="在 CentOS6.5 系统中安装"></a>在 CentOS6.5 系统中安装</h3><p>第一次是在 CentOS 上，安装过程还是比较麻烦的，<a href="https://www.tensorflow.org/install/install_linux" target="_blank" rel="external">参考</a>，需要下载代码编译安装，依赖也需要一个一个手工安装，但这些参照官网文档还是能一个个完成的，最后有一个比较重要的问题需要指出，CentOS6.5 的 GLIBC 版本过低，需要手工升级，升级过程还是有一些风险的，因为需要替换系统底层库文件( <code>/usr/lib64/libstdc++.so.6</code>，可用 <code>strings /usr/lib64/libstdc++.so.6 | grep GLIBC</code> 的方式查看其版本)，曾新眼目睹某同事因为替换这一文件而搞崩掉一台机器（崩掉是指: 直接掉线，无法进入系统，无法进行任何操作），最后我找到一个折中的办法，安装新版 <code>glibc</code> 后并不直接替换系统原有文件，而是每次需要的时候手动指定加载（可直接写到一个文件里，需要时 source 一下即可），以运行 python 为例，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /opt/glibc-2.17/lib/ld-linux-x86-64.so.2 --library-path /opt/glibc-2.17/lib:<span class="variable">$LD_LIBRART_PATH</span> python</div></pre></td></tr></table></figure></p>
<p>上面语句中，python 之前是指定 GLIBC 版本，python 为本次执行的命令，可修改为你需要执行的命令。</p>
<h3 id="在-MAC-系统中安装"><a href="#在-MAC-系统中安装" class="headerlink" title="在 MAC 系统中安装"></a>在 MAC 系统中安装</h3><p>第二次安装是在 macOS Sierra 系统中，当时 Tensorflow 已经支持 pip 安装了，安装过程十分简洁，<a href="https://www.tensorflow.org/install/install_mac" target="_blank" rel="external">参考</a>。</p>
<h2 id="相关-Tensorflow-库文件"><a href="#相关-Tensorflow-库文件" class="headerlink" title="相关 Tensorflow 库文件"></a>相关 Tensorflow 库文件</h2><p>大部分内容位置该<a href="https://github.com/niumeng07/tensorflow/tree/master/tensorflow/contrib/learn/python/learn/estimators" target="_blank" rel="external">目录</a>中，包括<a href="https://github.com/niumeng07/tensorflow/blob/master/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py" target="_blank" rel="external">dnn_linear_combined.py</a>, <a href="https://github.com/niumeng07/tensorflow/blob/master/tensorflow/contrib/learn/python/learn/estimators/estimator.py" target="_blank" rel="external">estimator.py</a> 等。这两个文件是该实验的入口，其它还有一些内容需要熟悉，从这两个文件展开即可。</p>
<h2 id="其它一些可用的库"><a href="#其它一些可用的库" class="headerlink" title="其它一些可用的库"></a>其它一些可用的库</h2><p>这一部分只是我了解过的，使用还不多，暂时写在这里，等尝试过后再展开。<br><strong> <a href="https://github.com/tflearn/tflearn/" target="_blank" rel="external">tf-learn</a>: </strong>  我也不清楚是哪个组织或哪些人开发这个基于 Tensorflow 的 API。不过我发现其<a href="http://tflearn.org/" target="_blank" rel="external">官网</a>是部署在 github 上的，感觉上不太像大厂的产物（毫无不敬之意），不是很系统，但做可以参考其代码尽快熟悉 Google Tensorflow。<br><strong> <a href="https://github.com/yahoo/TensorFlowOnSpark" target="_blank" rel="external">TensorflowOnSpark</a>: </strong> 雅虎出品，这是 Yahoo 开源其公司正在使用的 Tensorflow 与 Spark 结合运行的框架，已经在商业场景中得到了验证。<a href="http://yahoohadoop.tumblr.com/post/157196317141/open-sourcing-tensorflowonspark-distributed-deep" target="_blank" rel="external">参考文档</a>。</p>
<h2 id="Wide-amp-Deep-Model"><a href="#Wide-amp-Deep-Model" class="headerlink" title="Wide &amp; Deep Model"></a>Wide &amp; Deep Model</h2><p>本文的重点到这里才开始。</p>
<p>关于 Wide &amp; Deep 这个模型，Google 是用于 App 推荐，已经在 Google Play 上线，并取得了良好的效果。Google <a href="https://arxiv.org/pdf/1606.07792.pdf" target="_blank" rel="external">论文</a> 给出的数据如下:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Model</th>
<th style="text-align:center">Offline AUC</th>
<th style="text-align:center">Online Acquiition Gain</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Wide(Control)</td>
<td style="text-align:center">0.726</td>
<td style="text-align:center">0%</td>
</tr>
<tr>
<td style="text-align:center">Deep</td>
<td style="text-align:center">0.722</td>
<td style="text-align:center">+2.9%</td>
</tr>
<tr>
<td style="text-align:center">Wide &amp; Deep</td>
<td style="text-align:center">0.728</td>
<td style="text-align:center">+3.9%</td>
</tr>
</tbody>
</table>
<p>其实从以上表格中，我们还可以看到一些有意义的事情：线下 AUC 变差，并不一定导致线上的效果变差，我从事于广告的 CTR 预估工作，效果离线主要评价标准就是 AUC，这其实也有一定的不合理之处。我认为有一个简单的原则，则模型不变的情况下，我们可以用 AUC，Accu 等标准作评价，并指导是否值得上线实验，但在模型自身发生变化的情况下，我们还是要去做线上的效果实验来得出具体结论。</p>
<h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img title="模型结构" alt="模型结构" class="class1 class2" src="https://www.tensorflow.org/images/wide_n_deep.svg"></p>
<p>上图中，<em> <font color="blue">左为 Wide 模型</font> </em>，Google 在其论文中描述，使用了 FTRL 的优化算法以 Batch 训练了 $~y=w^Tx~+b$，其中 $w$ 为参数向量，$x$为特征向量，$b$为截距向量，并把 $y$ 输入到 Logistic 分类器中，实际上，该模型实际上是一个传统的采用 Batch 训练的 LR 模型，但 Google 的论文中指出，其优化方法是 FTRL，此处 FTRL 的应用方法我还去研究。<br>与 LR 模型一样，这一部分对数据和特征有良好的记忆能力，但它同时需要人工的去指定特征，包括组合特征，也就是说需要人工去做特征工程，而不具备自主分析的能力。<br>上图 <em> <font color="blue">右侧的 Deep 模型</font> </em> 很好的弥补了这一不足，Deep 模型吸引人的地方恰好是其分析能力，他能自动找到一些特征之前的关联并应用。我认为，Deep 的不足之处，除论文和许多的博客指出的记忆能力不足外，我认为它可以帮助我们节省大量本应该消耗在特征工程上的时间。<br>上图<em> <font color="blue">中间位置，即把 Wide 模型和 Deep 模型做了结合，形成 Wide &amp; Deep 模型</font> </em>。</p>
<p><strong> 未完 </strong></p>
]]></content>
      
        <categories>
            
            <category> 学习&amp;探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Wide &amp; Deep </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python 的多线程编程]]></title>
      <url>https://niumeng07.github.io/posts/eb642ea4/</url>
      <content type="html"><![CDATA[<p>虽然使用 Python 已经很长时间，但一般用于不太复杂的数据处理任务，最近研究 Tensorflow 时，需要处理大批量数据，Python 处理速度慢的问的显现出来，因为特意研究了一下 Python 的并行编程，记录在此，以备忘。<br><a id="more"></a></p>
<p>我此次主要使用了 map 函数来管理 multiprocessiong 达到并行的效果，原理和之前使用的 Java 线程池方法有些类似。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</div><div class="line"><span class="keyword">import</span> os,sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">processfile</span><span class="params">(file)</span>:</span></div><div class="line">    <span class="keyword">return</span> something</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multirun</span><span class="params">(fun,path)</span>:</span>                                                                   </div><div class="line">    pool = ThreadPool()</div><div class="line">    files = [ path + f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> os.path.isfile(os.path.join(path, f)) ]</div><div class="line">    result = pool.map(fun, files)   <span class="comment">#files是传入参数，需要支持iterator, 比如list等，返回result与被构造成list</span></div><div class="line">    pool.close()</div><div class="line">    pool.join()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    multirun(processfile, <span class="string">"./2017030209/Sample4hour/"</span>)</div></pre></td></tr></table></figure>
<p><br><br>Python 还有 subprocess, Thread 模块可实现并行化。不表。<br><br></p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 并行编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于 Github Pages 和 Hexo 搭建博客过程备忘]]></title>
      <url>https://niumeng07.github.io/posts/7998670d/</url>
      <content type="html"><![CDATA[<p>做为程序员，怎么能用现成的博客呢。只有用 Github 搭起的博客才显得高大上，才显得 Geek。<br><br>该博客基于<a href="https://hexo.io/docs/" target="_blank" rel="external">官网手册</a>说明搭建，同时参考了网上许多教程，可能是每个人操作的环境不一样，中间出现了一些小问题，但毕竟有 <a href="https:www.google.com/ncr" target="_blank" rel="external">Google</a>， 都能找到答案。在此记录一下使用的工具，算是备忘。<br><br>该博客基于 <a href="https://pages.github.com/" target="_blank" rel="external">Github Pages</a> 和 <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 完成，至于为什么选用这个组合，因为这个组合网上教程很多，而且简单。另外也可以在 VPS 搭网站，但我目前还没确定选用哪个框架，如果有高手不小心进了这里，倒是可以给点建议。先行谢过。<br><a id="more"></a></p>
<p>操作系统: macOS Sierra<br>服&ensp;务&ensp;器:   <a href="https://github.com/" target="_blank" rel="external">Github</a><br>框&ensp;&ensp;&ensp;&ensp;架:     <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a><br>主&ensp;&ensp;&ensp;&ensp;题:     <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee</a><br>评论系统: <a href="https://help.disqus.com" target="_blank" rel="external">Disqus</a><br>本地工具: <a href="https://nodejs.org/en/" target="_blank" rel="external">NodeJS</a>, <a href="https://git-scm.com/" target="_blank" rel="external">Git</a>  </p>
<h2 id="准备Github"><a href="#准备Github" class="headerlink" title="准备Github"></a>准备Github</h2><h3 id="注册-Github"><a href="#注册-Github" class="headerlink" title="注册 Github."></a>注册 Github.</h3><h3 id="生成-ssh-key-并添加到-Github"><a href="#生成-ssh-key-并添加到-Github" class="headerlink" title="生成 ssh-key 并添加到 Github."></a>生成 ssh-key 并添加到 Github.</h3><p>可执行如下命令验证上述步骤是否成功.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"user_name"</span></div><div class="line">$ git config --global user.email  <span class="string">"yourmail"</span></div></pre></td></tr></table></figure>
<h3 id="在github上建立博客仓库"><a href="#在github上建立博客仓库" class="headerlink" title="在github上建立博客仓库"></a>在github上建立博客仓库</h3><p>仓库 project name 必须为 your_github_name.github.io, 其它可根据自己爱好填写。</p>
<h2 id="准备Hexo"><a href="#准备Hexo" class="headerlink" title="准备Hexo"></a>准备Hexo</h2><h3 id="Requirements"><a href="#Requirements" class="headerlink" title=" Requirements "></a><strong> Requirements </strong></h3><p>Node.js, Git. 文章开始已经写出链接，自行下载安装即可。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title=" 安装Hexo"></a><strong> 安装Hexo</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo   <span class="comment"># 注意：官网给出的命令为 `npm install -g hexo-cli`, 但在 Mac 下该命令可能会有权限问题。</span></div><div class="line">$ hexo init blog_root    <span class="comment"># blog_root 可修改为你喜欢的的名字，该命令会在执行该命令的位置生成 blog_root 文件夹。</span></div><div class="line">$ <span class="built_in">cd</span> blog_root</div><div class="line">$ npm install</div><div class="line">$ hexo generate  <span class="comment"># 或 hexo g</span></div><div class="line">$ hexo s         <span class="comment"># 或hexo server</span></div></pre></td></tr></table></figure>
<p>在浏览器中打开 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>， 可查看是否成功。</p>
<h3 id="修改主题"><a href="#修改主题" class="headerlink" title=" 修改主题"></a><strong> 修改主题</strong></h3><p>在<a href="https://hexo.io/themes/" target="_blank" rel="external"> Hexo 官网 Theme 选项卡</a>中给出了许多主题，只需挑选并下载自己喜欢的，并进行简单配置即可，配置方法一般在主题的 README.md 文件中可查。我使用的是 Yelee 主题，文首已给出连接。</p>
<h3 id="安装评价系统"><a href="#安装评价系统" class="headerlink" title=" 安装评价系统"></a><strong> 安装评价系统</strong></h3><p>评价系统有 <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a>, <a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>可选。区别是多说使用国内的微信、新浪微博等做为登录验证， Disqus 使用国外的 Facebook 等做为登录验证，我使用的是 Disqus。 其实在国内使用多说的话速度会更快。不论使用哪一个，都需要到其官网注册帐户，并在网站根目录配置文件加入以下内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 评论</span></div><div class="line">share_jia: <span class="literal">true</span></div><div class="line"><span class="comment"># 分享</span></div><div class="line">duoshuo: <span class="literal">false</span>                        </div><div class="line">disqus_shrtname: your_disqus_short_name  <span class="comment"># 注：多说和 disqus 只需开启一个，另一个设置为 false。</span></div></pre></td></tr></table></figure></p>
<h3 id="其它功能"><a href="#其它功能" class="headerlink" title=" 其它功能"></a><strong> 其它功能</strong></h3><p><strong> 图床功能 </strong><br>我使用的是七牛免费的图床功能，上床图片到七牛云后，直接在博客文章中添加外链即可。</p>
<p>此外，我还安装了搜索map等功能，但插件安装可查资料较多，或者直接查看插件 README 文件，这里不再述说。</p>
<h2 id="Hexo-一些使用方法"><a href="#Hexo-一些使用方法" class="headerlink" title="Hexo 一些使用方法"></a>Hexo 一些使用方法</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title=" 新建文章 "></a><strong> 新建文章 </strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo n <span class="string">"article_name"</span></div></pre></td></tr></table></figure>
<p>以上命令会在 <code>blog_root/source/_post/</code>目录下生成article_name.md 文件，修改该文件为待发布内容。</p>
<h3 id="添加页面"><a href="#添加页面" class="headerlink" title=" 添加页面 "></a><strong> 添加页面 </strong></h3><p>可使用如下命令添加页面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new page <span class="string">"about"</span></div><div class="line">$ hexo new page <span class="string">"tags"</span></div></pre></td></tr></table></figure></p>
<h3 id="生成页面"><a href="#生成页面" class="headerlink" title=" 生成页面 "></a><strong> 生成页面 </strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title=" 本地预览 "></a><strong> 本地预览 </strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s   <span class="comment"># 在浏览器本地打开[页面](http://localhost:4000/)查看是否符合预期</span></div></pre></td></tr></table></figure>
<h3 id="发布"><a href="#发布" class="headerlink" title=" 发布 "></a><strong> 发布 </strong></h3><p>使用 <code>hexo deploy</code> 部署之前，需要对 <code>blog_root/_config.yml</code> 做如下修改。（同时，deploy 不仅限制部署网站到 Github Pages，还可部署到其它平台）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    <span class="built_in">type</span>: git</div><div class="line">    repository: https://github.com/niumeng07/niumeng07.github.io.git</div><div class="line">    branch: master</div></pre></td></tr></table></figure></p>
<p>使用如下命令发布。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d    <span class="comment"># 发布完成打开http://your_github_name.github.io 查看。</span></div></pre></td></tr></table></figure></p>
<p><br><br><br><br><br><br></p>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Yelee </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
