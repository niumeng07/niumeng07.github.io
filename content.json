[{"title":"LeetCode","date":"2017-03-24T15:12:33.000Z","path":"posts/6096f3d5/","text":"https://github.com/niumeng07/code-dev待续","tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://niumeng07.github.io/tags/LeetCode/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://niumeng07.github.io/tags/Algorithm/"}]},{"title":"Work-Is-Work","date":"2017-03-24T14:55:58.000Z","path":"posts/9af969b/","text":"今天在完全不知道为什么的情况下被狗咬了，而且还是当着老大的面的被咬了。工作中不同的人看这样的问题也会是不同的方面。我理解所有人，包括咬我的人，包括把它当枪使的人，包括老大。其实，一个团队能走到多大，看的是格局。 纪念。希望有一天我能把这当故事讲给你听。","tags":[{"name":"工作感触","slug":"工作感触","permalink":"https://niumeng07.github.io/tags/工作感触/"}]},{"title":"基于 Tensorflow 的 Google Wide & Deep Learning Model","date":"2017-03-13T11:35:35.000Z","path":"posts/515729c0/","text":"Google 的 Tensorflow 已经出来很长时间，这的确是一个非常实用的框架。前不久，Google 又发布了一个机器学习模型 Wide &amp; Deep Model，这一模型把传统的线性模型( LR )和深度学习模型( CNN、DNN )等结合在一起，目的是把线性模型的记忆能力和深度学习模型的分析能力结合在一起。近期在实践该模型，遇到很多坑，在 Google 上搜索时发现，大部分 Blog 等只是解析了该模型怎么用，或者说是把 Google 的一些 Tutorial 翻译了一遍，但是并没有对使用过程中可能存在的问题做出深入分析，或者说并没有把可能遇到问题的地方展现出来。因此我希望在这一方面写一写自己的经历，供大家参考。 本文采用实验记录的方式展开，可能也会存在许多问题，但这些问题可能大家也会遇到或者遇到过，希望能共同讨论。 Tensorflow 的安装我在 CentOS6.5 和 macOS Sirrra 上分别安装过 Tensorflow。两次安装均是参考 Tensorflow 官方 Intall 文档。 在 CentOS6.5 系统中安装第一次是在 CentOS 上，安装过程还是比较麻烦的，参考，需要下载代码编译安装，依赖也需要一个一个手工安装，但这些参照官网文档还是能一个个完成的，最后有一个比较重要的问题需要指出，CentOS6.5 的 GLIBC 版本过低，需要手工升级，升级过程还是有一些风险的，因为需要替换系统底层库文件( /usr/lib64/libstdc++.so.6，可用 strings /usr/lib64/libstdc++.so.6 | grep GLIBC 的方式查看其版本)，曾新眼目睹某同事因为替换这一文件而搞崩掉一台机器（崩掉是指: 直接掉线，无法进入系统，无法进行任何操作），最后我找到一个折中的办法，安装新版 glibc 后并不直接替换系统原有文件，而是每次需要的时候手动指定加载（可直接写到一个文件里，需要时 source 一下即可），以运行 python 为例，代码如下：1$ /opt/glibc-2.17/lib/ld-linux-x86-64.so.2 --library-path /opt/glibc-2.17/lib:$LD_LIBRART_PATH python 上面语句中，python 之前是指定 GLIBC 版本，python 为本次执行的命令，可修改为你需要执行的命令。 在 MAC 系统中安装第二次安装是在 macOS Sierra 系统中，当时 Tensorflow 已经支持 pip 安装了，安装过程十分简洁，参考。 相关 Tensorflow 库文件大部分内容位置该目录中，包括dnn_linear_combined.py, estimator.py 等。这两个文件是该实验的入口，其它还有一些内容需要熟悉，从这两个文件展开即可。 其它一些可用的库这一部分只是我了解过的，使用还不多，暂时写在这里，等尝试过后再展开。 tf-learn: 我也不清楚是哪个组织或哪些人开发这个基于 Tensorflow 的 API。不过我发现其官网是部署在 github 上的，感觉上不太像大厂的产物（毫无不敬之意），不是很系统，但做可以参考其代码尽快熟悉 Google Tensorflow。 TensorflowOnSpark: 雅虎出品，这是 Yahoo 开源其公司正在使用的 Tensorflow 与 Spark 结合运行的框架，已经在商业场景中得到了验证。参考文档。 Wide &amp; Deep Model本文的重点到这里才开始。 关于 Wide &amp; Deep 这个模型，Google 是用于 App 推荐，已经在 Google Play 上线，并取得了良好的效果。Google 论文 给出的数据如下: Model Offline AUC Online Acquiition Gain Wide(Control) 0.726 0% Deep 0.722 +2.9% Wide &amp; Deep 0.728 +3.9% 其实从以上表格中，我们还可以看到一些有意义的事情：线下 AUC 变差，并不一定导致线上的效果变差，我从事于广告的 CTR 预估工作，效果主要的离线评价标准就是 AUC，这其实也有一定的不合理之处。我认为有一个简单的原则，则模型不变的情况下，我们可以用 AUC，Accu 等标准作评价，并指导是否值得上线实验，但在模型发生变化的情况下，我们还是要去做线上的效果实验来得出具体结论(只要AUC不大幅下降就可以小流量线上的实验)。 模型结构 上图中， 左为 Wide 模型 ，Google 在其论文中描述，使用了 FTRL 的优化算法以 Batch 训练了 $~y=w^Tx~+b$，其中 $w$ 为参数向量，$x$为特征向量，$b$为截距向量，并把 $y$ 输入到 Logistic 分类器中，实际上，该模型实际上是一个传统的采用 Batch 训练的 LR 模型，但 Google 的论文中指出，其优化方法是 FTRL，此处 FTRL 的应用方法我还去研究。与 LR 模型一样，这一部分对数据和特征有良好的记忆能力，但它同时需要人工的去指定特征，包括组合特征，也就是说需要人工去做特征工程，而不具备自主分析的能力。上图 右侧的 Deep 模型 很好的弥补了这一不足，Deep 模型吸引人的地方恰好是其分析能力，他能自动找到一些特征之前的关联并应用。我认为，Deep 的不足之处，除论文和许多的博客指出的记忆能力不足外，我认为它可以帮助我们节省大量本应该消耗在特征工程上的时间。上图 中间位置，即把 Wide 模型和 Deep 模型做了结合，形成 Wide &amp; Deep 模型 。 实验最近一直忙于实验，没来写写进度，今天清明假期第一天，写写近况吧。因为实验效果还没有达到预期，只能记录一下实验过程和踩的坑，就像本文本来的目的一样，把实验过程和细节承现出来。还有一个可喜的事情，申请的GPU机器终于到来了，实现速度大增呀，囍！ 结之前效果不好的分析主要集中在以下几个方面： 是否梯度爆炸，打印出了 FTRL 的 ADAM 的参数，并根据其值对 norm 参数做了调整。 Dropout 调整。 另，近期在同时进行 PNN 的实验，理论上 PNN 效果应该不如 Wide&amp;Deep 效果，但还是要实验一下的。 未完","tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://niumeng07.github.io/tags/Deep-Learning/"},{"name":"Tensorflow","slug":"Tensorflow","permalink":"https://niumeng07.github.io/tags/Tensorflow/"},{"name":"Wide & Deep","slug":"Wide-Deep","permalink":"https://niumeng07.github.io/tags/Wide-Deep/"}]},{"title":"Python 的多线程编程","date":"2017-03-12T15:12:43.000Z","path":"posts/eb642ea4/","text":"虽然使用 Python 已经很长时间，但一般用于不太复杂的数据处理任务，最近研究 Tensorflow 时，需要处理大批量数据，Python 处理速度慢的问的显现出来，因为特意研究了一下 Python 的并行编程，记录在此，以备忘。 我此次主要使用了 map 函数来管理 multiprocessiong 达到并行的效果，原理和之前使用的 Java 线程池方法有些类似。 12345678910111213141516from multiprocessing import Poolfrom multiprocessing.dummy import Pool as ThreadPoolimport os,sysdef processfile(file): return something def multirun(fun,path): pool = ThreadPool() files = [ path + f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f)) ] result = pool.map(fun, files) #files是传入参数，需要支持iterator, 比如list等，返回result与被构造成list pool.close() pool.join()if __name__ == \"__main__\": multirun(processfile, \"./2017030209/Sample4hour/\") Python 还有 subprocess, Thread 模块可实现并行化。不表。","tags":[{"name":"Python","slug":"Python","permalink":"https://niumeng07.github.io/tags/Python/"},{"name":"并行编程","slug":"并行编程","permalink":"https://niumeng07.github.io/tags/并行编程/"}]},{"title":"基于 Github Pages 和 Hexo 搭建博客过程备忘","date":"2017-03-10T15:12:43.000Z","path":"posts/7998670d/","text":"做为程序员，怎么能用现成的博客呢。只有用 Github 搭起的博客才显得高大上，才显得 Geek。该博客基于官网手册说明搭建，同时参考了网上许多教程，可能是每个人操作的环境不一样，中间出现了一些小问题，但毕竟有 Google， 都能找到答案。在此记录一下使用的工具，算是备忘。该博客基于 Github Pages 和 Hexo 完成，至于为什么选用这个组合，因为这个组合网上教程很多，而且简单。另外也可以在 VPS 搭网站，但我目前还没确定选用哪个框架，如果有高手不小心进了这里，倒是可以给点建议。先行谢过。 操作系统: macOS Sierra服&ensp;务&ensp;器: Github框&ensp;&ensp;&ensp;&ensp;架: Hexo主&ensp;&ensp;&ensp;&ensp;题: Yelee评论系统: Disqus本地工具: NodeJS, Git 准备Github注册 Github.生成 ssh-key 并添加到 Github.可执行如下命令验证上述步骤是否成功.1$ ssh -T git@github.com 设置用户信息12$ git config --global user.name \"user_name\"$ git config --global user.email \"yourmail\" 在github上建立博客仓库仓库 project name 必须为 your_github_name.github.io, 其它可根据自己爱好填写。 准备Hexo Requirements Node.js, Git. 文章开始已经写出链接，自行下载安装即可。 安装Hexo123456$ sudo npm install -g hexo # 注意：官网给出的命令为 `npm install -g hexo-cli`, 但在 Mac 下该命令可能会有权限问题。$ hexo init blog_root # blog_root 可修改为你喜欢的的名字，该命令会在执行该命令的位置生成 blog_root 文件夹。$ cd blog_root$ npm install$ hexo generate # 或 hexo g$ hexo s # 或hexo server 在浏览器中打开 http://localhost:4000/， 可查看是否成功。 修改主题在 Hexo 官网 Theme 选项卡中给出了许多主题，只需挑选并下载自己喜欢的，并进行简单配置即可，配置方法一般在主题的 README.md 文件中可查。我使用的是 Yelee 主题，文首已给出连接。 安装评价系统评价系统有 Disqus, 多说可选。区别是多说使用国内的微信、新浪微博等做为登录验证， Disqus 使用国外的 Facebook 等做为登录验证，我使用的是 Disqus。 其实在国内使用多说的话速度会更快。不论使用哪一个，都需要到其官网注册帐户，并在网站根目录配置文件加入以下内容。12345# 评论share_jia: true# 分享duoshuo: false disqus_shrtname: your_disqus_short_name # 注：多说和 disqus 只需开启一个，另一个设置为 false。 其它功能 图床功能 我使用的是七牛免费的图床功能，上床图片到七牛云后，直接在博客文章中添加外链即可。 此外，我还安装了搜索map等功能，但插件安装可查资料较多，或者直接查看插件 README 文件，这里不再述说。 Hexo 一些使用方法 新建文章 1$ hexo n \"article_name\" 以上命令会在 blog_root/source/_post/目录下生成article_name.md 文件，修改该文件为待发布内容。 添加页面 可使用如下命令添加页面。12$ hexo new page \"about\"$ hexo new page \"tags\" 生成页面 1$ hexo g 本地预览 1$ hexo s # 在浏览器本地打开[页面](http://localhost:4000/)查看是否符合预期 发布 使用 hexo deploy 部署之前，需要对 blog_root/_config.yml 做如下修改。（同时，deploy 不仅限制部署网站到 Github Pages，还可部署到其它平台）1234deploy: type: git repository: https://github.com/niumeng07/niumeng07.github.io.git branch: master 使用如下命令发布。1$ hexo d # 发布完成打开http://your_github_name.github.io 查看。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://niumeng07.github.io/tags/Hexo/"},{"name":"Yelee","slug":"Yelee","permalink":"https://niumeng07.github.io/tags/Yelee/"},{"name":"Github Pages","slug":"Github-Pages","permalink":"https://niumeng07.github.io/tags/Github-Pages/"}]}]